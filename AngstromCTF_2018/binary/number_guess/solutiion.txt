In this problem, I saw that there is a number guessing game. I looked at the code and thought that there might be a vulnerability in the srand since I saw that it was using a seed of time(NULL). I looked it up online and it seems that if multiple programs are started within 1 second of each other, it might be possible to get the same random numbers.
I installed terminator and ran a nc connection to two nc instances at the same time, and tried to get the guessed number in one of the instance and input the sum to the other, but it didnt work. I guess my understanding of the srand was not correct, or maybe nc worked differently.
Then I looked into the assembly dump, and tried to see if I could overwrite buffers, but when I tried to do so, it also didnt work. The name was of fixed length, and I couldnt get it to overwrite the buffer above the guess number, in hopes that I could overwrite rand1 and rand2 to 0 :).
Finally I looked at the hint.
The hint told me to look for a format string attack in printf. Basically it involves supplying input containing format specifiers like %x, %d etc to make the printf print out contents of memory.
Since the only place we can print out the contents AND THEN USE IT is the name input, I tried several combinations like %x %x, multiple %x values. But when I tried adding them up and giving them to the program it was still not working. Then I realised that %x was printing the memory addresses, rather than the contents. Also, I didnt know which two positions to add, so this was just trial and error for me. I tried using %d, and then, I observed the correct answer, and tried to compare it with sum of two numbers in the internal output within the name, and then found the positions of the numbers which were getting summed up. I used the same positions and entered their sum next time, which gave me the flag.

Flag: actf{format_stringz_are_pre77y_sc4ry}
